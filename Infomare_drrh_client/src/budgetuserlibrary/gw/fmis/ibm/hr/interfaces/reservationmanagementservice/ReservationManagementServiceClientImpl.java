package budgetuserlibrary.gw.fmis.ibm.hr.interfaces.reservationmanagementservice;

import hr.infomare.drrh.dao.BcitemlstDAO;
import hr.infomare.drrh.dao.BudcomDAO;
import hr.infomare.drrh.dao.BudcommsgDAO;
import hr.infomare.drrh.dao.DocheadDAO;
import hr.infomare.drrh.dao.NotifheadDAO;
import hr.infomare.drrh.dao.ReqmsgDAO;
import hr.infomare.drrh.dao.ResxmlDAO;
import hr.infomare.drrh.dao.StatnotifDAO;
import hr.infomare.drrh.dao.VendorVeznaDAO;
import hr.infomare.drrh.hibernate.SessionPomocna;
import hr.infomare.drrh.pojo.Bcitemlst;
import hr.infomare.drrh.pojo.Budcom;
import hr.infomare.drrh.pojo.Budcommsg;
import hr.infomare.drrh.pojo.Dochead;
import hr.infomare.drrh.pojo.Notifhead;
import hr.infomare.drrh.pojo.Reqmsg;
import hr.infomare.drrh.pojo.Resmsg;
import hr.infomare.drrh.pojo.Statnotif;
import hr.infomare.drrh.pomocni.BudcommsgType;
import hr.infomare.drrh.pomocni.Debug;
import hr.infomare.drrh.pomocni.Log;
import hr.infomare.drrh.pomocni.Pomocna;
import hr.infomare.drrh.pomocni.PomocnaDatum;
import hr.infomare.drrh.pomocni.PomocnaError;
import hr.infomare.drrh.pomocni.PomocnaKlijent;
import hr.infomare.drrh.postavke.Postavke;

import java.net.URL;
import java.util.Iterator;
import java.util.List;

import javax.xml.namespace.QName;

import org.hibernate.Session;

import budgetuserlibrary.gw.fmis.ibm.hr.infotypes.BudgetCommitment;
import budgetuserlibrary.gw.fmis.ibm.hr.infotypes.MessageHeader;
import budgetuserlibrary.gw.fmis.ibm.hr.infotypes.ResponseMessageType;
import budgetuserlibrary.gw.fmis.ibm.hr.interfaces.reservationmanagementservice.binding.ManageReservationExportReservationManagementServiceHttpService;
import budgetuserlibrary.gw.fmis.ibm.hr.messages.ReservationChangeRequestMsg;
import budgetuserlibrary.gw.fmis.ibm.hr.messages.ReservationCloseRequestMsg;
import budgetuserlibrary.gw.fmis.ibm.hr.messages.ReservationCreateRequestMsg;
import budgetuserlibrary.gw.fmis.ibm.hr.messages.ReservationResponseMsg;

/**
 * This class was generated by Apache CXF 2.4.0 2011-10-05T09:15:48.550+02:00
 * Generated source version: 2.4.0
 * 
 */

public final class ReservationManagementServiceClientImpl {
	private QName serviceName;
	private URL wsdlURL = ManageReservationExportReservationManagementServiceHttpService.WSDL_LOCATION;
	private ManageReservationExportReservationManagementServiceHttpService servis;
	private ReservationManagementService port;
	private SessionPomocna sessionPomocna;
	private Session session;
	private BudcommsgDAO budcomMsgDAO;
	private BcitemlstDAO bctItemLstDAO;
	private DocheadDAO docHeadDAO;
	private ReqmsgDAO reqMsgDAO;
	private VendorVeznaDAO vendorVeznaDAO;
	private StatnotifDAO statusNotifDAO;
	private NotifheadDAO notifHeadDAO;
	private BudcomDAO budComDAO;
	private Debug debug = new Debug("Reservation");

	public ReservationManagementServiceClientImpl() {
	}

	public void razmjenaRezervacija() {
		try {			
			otvoriPortISesiju();
			createReservation();
			changeReservation();
			closeReservation();			
		} catch (Exception e) {
			Log.loger.severe("Greška kod razmjene rezervacija "
					+ PomocnaError.getErrorMessage(e));
		}
	}

	private void otvoriPortISesiju() {
		serviceName = new QName(
				ManageReservationExportReservationManagementServiceHttpService.TARGET_NAMESPACE,
				ManageReservationExportReservationManagementServiceHttpService.SERVIS);
		wsdlURL = ManageReservationExportReservationManagementServiceHttpService.WSDL_LOCATION;
		servis = new ManageReservationExportReservationManagementServiceHttpService(
				wsdlURL, serviceName);
		port = servis
				.getManageReservationExportReservationManagementServiceHttpPort();
		PomocnaKlijent.postavkeKlijenta(port);
		sessionPomocna = new SessionPomocna();
		session = sessionPomocna.getSession();
		budcomMsgDAO = new BudcommsgDAO(session);
		bctItemLstDAO = new BcitemlstDAO(session);
		docHeadDAO = new DocheadDAO(session);
		reqMsgDAO = new ReqmsgDAO(session);
		statusNotifDAO = new StatnotifDAO(session);
		notifHeadDAO = new NotifheadDAO(session);
		vendorVeznaDAO = new VendorVeznaDAO(session);
		budComDAO = new BudcomDAO(session);
	}

	private void createReservation() {
		Integer reqMsgId = reqMsgDAO.getIduciRbr();
		Integer statNotId = statusNotifDAO.getIduciRbr();
		Integer notHeadId = notifHeadDAO.getIduciRbr();
		ReservationCreateRequestMsg request = new ReservationCreateRequestMsg();
		MessageHeader messageHeader;
		Reqmsg reqMsg = null;
		Resmsg resMsg = null;
		ReservationResponseMsg response = null;
		BudgetCommitment budgetCommitment = null;
		Statnotif statNotif = null;
		//Budcom budCom = null;
		Notifhead notifHead = null;
		List rezervacije = budcomMsgDAO.getBudcommsg(BudcommsgType.RESERVATION,
				(byte) 1);
		List bctItems;
		Dochead docHead = null;
		Bcitemlst bctItemlst;
		for (Iterator iterator = rezervacije.iterator(); iterator.hasNext();) {
			Budcommsg budComMsg = (Budcommsg) iterator.next();
			bctItems = bctItemLstDAO.getBcitemlst(budComMsg.getBcmsgid());
			docHead = docHeadDAO.getDocHeadByPK(budComMsg.getRefdocid());
			try {
				sessionPomocna.otvoriTransakciju();
				// Request
				messageHeader = new MessageHeader();
				budgetCommitment = new BudgetCommitment();
				budgetCommitment.postaviVrijednosti(budComMsg, bctItems,
						docHead, vendorVeznaDAO, docHeadDAO);
				request.setMessageHeader(messageHeader);
				request.setBudgetCommitment(budgetCommitment);
				try {
					response = port.createReservation(request);
						response.setMessageHeader(Pomocna
								.getNewMessageHeader(session));
				} catch (Exception e) {					
						response = new ReservationResponseMsg();
						response.setMessageHeader(Pomocna
								.getNewMessageHeader(session));
						response.setResponseMessageType(ResponseMessageType.ERROR);
						response.setErrorResponse(PomocnaError
								.getErrorResponse("Reservation", e));					
				}
				// Response
				resMsg = new Resmsg();
				reqMsg = new Reqmsg();
				statNotif = new Statnotif();
				//budCom = new Budcom();
				notifHead = new Notifhead();
				reqMsg.postaviVrijednosti(response.getMessageHeader(),
						reqMsgId, "createReservation");
				resMsg.postaviVrijednosti(response.getMessageHeader(),
						"createReservation", response.getResponseMessageType(), reqMsg);				
				budComMsg.postaviVrijednosti(Pomocna.getStatus(response
						.getResponseMessageType()), reqMsg, PomocnaDatum
						.XMLDatumUDate(response.getMessageHeader()
								.getSubmitionTimestamp()), response
						.getNotificationResponse());
				// Samo ako response nema error-a
				if (response.getResponseMessageType().equals(
						ResponseMessageType.NOTIFICATION)) {
					/*statNotif.postaviVrijednosti(statNotId, resMsg,
							"createReservation", response
									.getNotificationResponse()
									.getCommitmentStatus(), response
									.getMessageHeader());
					notifHead.postaviVrijednosti(notHeadId, statNotId, resMsg,
							response.getMessageHeader(), response
									.getNotificationResponse().getHeader(),
							response.getNotificationResponse());
					budCom.postaviVrijednosti(budComMsg, notHeadId, statNotId,
							response.getNotificationResponse().getHeader(),
							response.getNotificationResponse()
									.getCommitmentStatus(), resMsg);
					docHead.postaviVrijednosti(response
							.getNotificationResponse().getHeader(), response
							.getMessageHeader());*/
				}

				// Upis u bazu
				session.save(resMsg);
				Pomocna.obradaGresaka(session, response.getErrorResponse(),
						response.getMessageHeader());
				session.save(reqMsg);
				session.update(budComMsg);
				if (response.getResponseMessageType().equals(
						ResponseMessageType.NOTIFICATION)) {
					/*session.save(statNotif);
					session.save(notifHead);
					session.saveOrUpdate(budCom);
					session.update(docHead);*/
				}
				sessionPomocna.commitTransakcije();
				++reqMsgId;
				++statNotId;
				++notHeadId;
			} catch (Exception e) {
				sessionPomocna.rollbackTransakcije();
				Log.loger
						.severe("Greška kod kreiranja nove rezervacije, poruka: "
								+ Integer.toString(budComMsg.getBcmsgid())
								+ PomocnaError.getErrorMessage(e));
			}

			finally {
				try {
					ResxmlDAO.spremiResponse(response.getMessageHeader()
							.getResponseMsgId(), response, session,
							sessionPomocna);
					if (Postavke.DEBUG_POJO) {
						debug.ispisUXML(
								resMsg,
								"Pojo_response_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								reqMsg,
								"Pojo_request_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(budComMsg, "Pojo_reservation_"
								+ Integer.toString(budComMsg.getBcmsgid()));
						debug.ispisUXML(
								statNotif,
								"Pojo_statnotif_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								notifHead,
								"Pojo_notifhead_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						/*debug.ispisUXML(
								budCom,
								"Pojo_budcom_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));*/
						debug.ispisUXML(
								docHead,
								"Pojo_dochead_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));

					}
					if (Postavke.DEBUG_PORUKA) {
						debug.ispisUXML(
								request,
								"Message_request_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								response,
								"Message_response_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
					}
				} catch (Exception e) {
					Log.loger
							.severe("Greška kod xml trace upisa rezervacije, poruka: "
									+ Integer.toString(budComMsg.getBcmsgid())
									+ " " + PomocnaError.getErrorMessage(e));
				}
			}

		}

	}

	private void changeReservation() {
		Integer reqMsgId = reqMsgDAO.getIduciRbr();
		Integer statNotId = statusNotifDAO.getIduciRbr();
		Integer notHeadId = notifHeadDAO.getIduciRbr();
		ReservationChangeRequestMsg request = new ReservationChangeRequestMsg();
		MessageHeader messageHeader;
		Reqmsg reqMsg = null;
		Resmsg resMsg = null;
		ReservationResponseMsg response = null;
		BudgetCommitment budgetCommitment = null;
		Statnotif statNotif = null;
		//Budcom budCom = null;
		Notifhead notifHead = null;
		List rezervacije = budcomMsgDAO.getBudcommsg(BudcommsgType.RESERVATION,
				(byte) 2);
		List bctItems;
		Dochead docHead = null;
		Bcitemlst bctItemlst;
		for (Iterator iterator = rezervacije.iterator(); iterator.hasNext();) {
			Budcommsg budComMsg = (Budcommsg) iterator.next();
			bctItems = bctItemLstDAO.getBcitemlst(budComMsg.getBcmsgid());
			docHead = docHeadDAO.getDocHeadByPK(budComMsg.getRefdocid());
			try {
				sessionPomocna.otvoriTransakciju();
				// Request
				messageHeader = new MessageHeader();
				budgetCommitment = new BudgetCommitment();
				budgetCommitment.postaviVrijednosti(budComMsg, bctItems,
						docHead, vendorVeznaDAO, docHeadDAO);
				request.setMessageHeader(messageHeader);
				request.setBudgetCommitment(budgetCommitment);
				try {
					response = port.changeReservation(request);			
						response.setMessageHeader(Pomocna
								.getNewMessageHeader(session));
				} catch (Exception e) {					
						response = new ReservationResponseMsg();
						response.setMessageHeader(Pomocna
								.getNewMessageHeader(session));
						response.setResponseMessageType(ResponseMessageType.ERROR);
						response.setErrorResponse(PomocnaError
								.getErrorResponse("Reservation", e));					
				}
				// Response
				resMsg = new Resmsg();
				reqMsg = new Reqmsg();
				statNotif = new Statnotif();
				//budCom = new Budcom();
				notifHead = new Notifhead();
				reqMsg.postaviVrijednosti(response.getMessageHeader(),
						reqMsgId, "changeReservation");
				resMsg.postaviVrijednosti(response.getMessageHeader(),
						"changeReservation", response.getResponseMessageType(), reqMsg);				
				budComMsg.postaviVrijednosti(Pomocna.getStatus(response
						.getResponseMessageType()), reqMsg, PomocnaDatum
						.XMLDatumUDate(response.getMessageHeader()
								.getSubmitionTimestamp()), response
						.getNotificationResponse());
				// Samo ako response nema error-a
				if (response.getResponseMessageType().equals(
						ResponseMessageType.NOTIFICATION)) {
				/*	statNotif.postaviVrijednosti(statNotId, resMsg,
							"changeReservation", response
									.getNotificationResponse()
									.getCommitmentStatus(), response
									.getMessageHeader());
					notifHead.postaviVrijednosti(notHeadId, statNotId, resMsg,
							response.getMessageHeader(), response
									.getNotificationResponse().getHeader(),
							response.getNotificationResponse());
					budCom = budComDAO.getBudcomByPK(budComMsg.getCurlib(),
							budComMsg.getR95upr(), budComMsg.getR95god(),
							budComMsg.getR95rbr());
					budCom.postaviVrijednosti(budComMsg, notHeadId, statNotId,
							response.getNotificationResponse().getHeader(),
							response.getNotificationResponse()
									.getCommitmentStatus(), resMsg);
					docHead.postaviVrijednosti(response
							.getNotificationResponse().getHeader(), response
							.getMessageHeader());*/
				}

				// Upis u bazu
				session.save(resMsg);
				Pomocna.obradaGresaka(session, response.getErrorResponse(),
						response.getMessageHeader());
				session.save(reqMsg);
				session.update(budComMsg);
				if (response.getResponseMessageType().equals(
						ResponseMessageType.NOTIFICATION)) {
				/*	session.save(statNotif);
					session.save(notifHead);
					session.saveOrUpdate(budCom);
					session.update(docHead);*/
				}
				sessionPomocna.commitTransakcije();
				++reqMsgId;
				++statNotId;
				++notHeadId;
			} catch (Exception e) {
				sessionPomocna.rollbackTransakcije();
				Log.loger.severe("Greška kod izmjene rezervacije, poruka: "
						+ Integer.toString(budComMsg.getBcmsgid())
						+ PomocnaError.getErrorMessage(e));
			}

			finally {
				try {
					ResxmlDAO.spremiResponse(response.getMessageHeader()
							.getResponseMsgId(), response, session,
							sessionPomocna);
					if (Postavke.DEBUG_POJO) {
						debug.ispisUXML(
								resMsg,
								"Pojo_response_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								reqMsg,
								"Pojo_request_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(budComMsg, "Pojo_reservation_"
								+ Integer.toString(budComMsg.getBcmsgid()));
						debug.ispisUXML(
								statNotif,
								"Pojo_statnotif_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								notifHead,
								"Pojo_notifhead_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						/*debug.ispisUXML(
								budCom,
								"Pojo_budcom_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));*/
						debug.ispisUXML(
								docHead,
								"Pojo_dochead_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));

					}
					if (Postavke.DEBUG_PORUKA) {
						debug.ispisUXML(
								request,
								"Message_request_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								response,
								"Message_response_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
					}
				} catch (Exception e) {
					Log.loger
							.severe("Greška kod xml trace izmjene rezervacije, poruka: "
									+ Integer.toString(budComMsg.getBcmsgid())
									+ " " + PomocnaError.getErrorMessage(e));
				}
			}

		}
	}

	private void closeReservation() {
		Integer reqMsgId = reqMsgDAO.getIduciRbr();
		Integer statNotId = statusNotifDAO.getIduciRbr();
		Integer notHeadId = notifHeadDAO.getIduciRbr();
		ReservationCloseRequestMsg request = new ReservationCloseRequestMsg();
		MessageHeader messageHeader;
		Reqmsg reqMsg = null;
		Resmsg resMsg = null;
		ReservationResponseMsg response = null;
		BudgetCommitment budgetCommitment = null;
		Statnotif statNotif = null;
		//Budcom budCom = null;
		Notifhead notifHead = null;
		List rezervacije = budcomMsgDAO.getBudcommsg(BudcommsgType.RESERVATION,
				(byte) 9);
		List bctItems;
		Dochead docHead = null;
		Bcitemlst bctItemlst;
		for (Iterator iterator = rezervacije.iterator(); iterator.hasNext();) {
			Budcommsg budComMsg = (Budcommsg) iterator.next();
			bctItems = bctItemLstDAO.getBcitemlst(budComMsg.getBcmsgid());
			docHead = docHeadDAO.getDocHeadByPK(budComMsg.getRefdocid());
			try {
				sessionPomocna.otvoriTransakciju();
				// Request
				messageHeader = new MessageHeader();
				budgetCommitment = new BudgetCommitment();
				budgetCommitment.postaviVrijednosti(budComMsg, bctItems,
						docHead, vendorVeznaDAO, docHeadDAO);
				request.setMessageHeader(messageHeader);
				request.setBudgetCommitment(budgetCommitment);
				try {
					response = port.closeReservation(request);
						response.setMessageHeader(Pomocna
								.getNewMessageHeader(session));
				} catch (Exception e) {					
						response = new ReservationResponseMsg();
						response.setMessageHeader(Pomocna
								.getNewMessageHeader(session));
						response.setResponseMessageType(ResponseMessageType.ERROR);
						response.setErrorResponse(PomocnaError
								.getErrorResponse("Reservation", e));					
				}
				// Response
				resMsg = new Resmsg();
				reqMsg = new Reqmsg();
				statNotif = new Statnotif();
				//budCom = new Budcom();
				notifHead = new Notifhead();
				reqMsg.postaviVrijednosti(response.getMessageHeader(),
						reqMsgId, "closeReservation");
				resMsg.postaviVrijednosti(response.getMessageHeader(),
						"closeReservation", response.getResponseMessageType(), reqMsg);				
				budComMsg.postaviVrijednosti(Pomocna.getStatus(response
						.getResponseMessageType()), reqMsg, PomocnaDatum
						.XMLDatumUDate(response.getMessageHeader()
								.getSubmitionTimestamp()), response
						.getNotificationResponse());
				// Samo ako response nema error-a
				if (response.getResponseMessageType().equals(
						ResponseMessageType.NOTIFICATION)) {
				/*	statNotif.postaviVrijednosti(statNotId, resMsg,
							"closeReservation", response
									.getNotificationResponse()
									.getCommitmentStatus(), response
									.getMessageHeader());
					notifHead.postaviVrijednosti(notHeadId, statNotId, resMsg,
							response.getMessageHeader(), response
									.getNotificationResponse().getHeader(),
							response.getNotificationResponse());
					budCom = budComDAO.getBudcomByPK(budComMsg.getCurlib(),
							budComMsg.getR95upr(), budComMsg.getR95god(),
							budComMsg.getR95rbr());
					budCom.postaviVrijednosti(budComMsg, notHeadId, statNotId,
							response.getNotificationResponse().getHeader(),
							response.getNotificationResponse()
									.getCommitmentStatus(), resMsg);
					docHead.postaviVrijednosti(response
							.getNotificationResponse().getHeader(), response
							.getMessageHeader());*/
				}

				// Upis u bazu
				session.save(resMsg);
				Pomocna.obradaGresaka(session, response.getErrorResponse(),
						response.getMessageHeader());
				session.save(reqMsg);
				session.update(budComMsg);
				if (response.getResponseMessageType().equals(
						ResponseMessageType.NOTIFICATION)) {
				/*	session.save(statNotif);
					session.save(notifHead);
					session.saveOrUpdate(budCom);
					session.update(docHead);*/
				}
				sessionPomocna.commitTransakcije();
				++reqMsgId;
				++statNotId;
				++notHeadId;
			} catch (Exception e) {
				sessionPomocna.rollbackTransakcije();
				Log.loger.severe("Greška kod zatvaranja rezervacije, poruka: "
						+ Integer.toString(budComMsg.getBcmsgid())
						+ PomocnaError.getErrorMessage(e));
			}

			finally {
				try {
					ResxmlDAO.spremiResponse(response.getMessageHeader()
							.getResponseMsgId(), response, session,
							sessionPomocna);
					if (Postavke.DEBUG_POJO) {
						debug.ispisUXML(
								resMsg,
								"Pojo_response_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								reqMsg,
								"Pojo_request_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(budComMsg, "Pojo_reservation_"
								+ Integer.toString(budComMsg.getBcmsgid()));
						debug.ispisUXML(
								statNotif,
								"Pojo_statnotif_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								notifHead,
								"Pojo_notifhead_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						/*debug.ispisUXML(
								budCom,
								"Pojo_budcom_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));*/
						debug.ispisUXML(
								docHead,
								"Pojo_dochead_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));

					}
					if (Postavke.DEBUG_PORUKA) {
						debug.ispisUXML(
								request,
								"Message_request_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
						debug.ispisUXML(
								response,
								"Message_response_"
										+ Integer.toString(budComMsg
												.getBcmsgid()));
					}
				} catch (Exception e) {
					Log.loger
							.severe("Greška kod xml trace zatvaranja rezervacije, poruka: "
									+ Integer.toString(budComMsg.getBcmsgid())
									+ " " + PomocnaError.getErrorMessage(e));
				}
			}

		}

	}
}