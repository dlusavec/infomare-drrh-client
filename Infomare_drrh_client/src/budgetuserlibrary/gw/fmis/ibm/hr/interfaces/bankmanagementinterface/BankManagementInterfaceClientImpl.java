package budgetuserlibrary.gw.fmis.ibm.hr.interfaces.bankmanagementinterface;

import hr.infomare.drrh.dao.BankmsgDAO;
import hr.infomare.drrh.dao.ReqmsgDAO;
import hr.infomare.drrh.dao.ResxmlDAO;
import hr.infomare.drrh.hibernate.SessionPomocna;
import hr.infomare.drrh.pojo.Bankmsg;
import hr.infomare.drrh.pojo.Reqmsg;
import hr.infomare.drrh.pojo.Resmsg;
import hr.infomare.drrh.pomocni.Debug;
import hr.infomare.drrh.pomocni.Log;
import hr.infomare.drrh.pomocni.Pomocna;
import hr.infomare.drrh.pomocni.PomocnaDatum;
import hr.infomare.drrh.pomocni.PomocnaError;
import hr.infomare.drrh.postavke.Postavke;

import java.net.URL;
import java.util.Iterator;
import java.util.List;

import javax.xml.namespace.QName;

import org.hibernate.Session;

import budgetuserlibrary.gw.fmis.ibm.hr.infotypes.Bank;
import budgetuserlibrary.gw.fmis.ibm.hr.infotypes.MessageHeader;
import budgetuserlibrary.gw.fmis.ibm.hr.interfaces.bankmanagementinterface.binding.BankManagementInterfaceExportBankManagementInterfaceHttpService;
import budgetuserlibrary.gw.fmis.ibm.hr.messages.BankChangeRequestMsg;
import budgetuserlibrary.gw.fmis.ibm.hr.messages.BankCreationRequestMsg;
import budgetuserlibrary.gw.fmis.ibm.hr.messages.BankResponseMsg;

/**
 * This class was generated by Apache CXF 2.4.0 2011-06-18T09:00:44.307+02:00
 * Generated source version: 2.4.0
 * 
 */

public final class BankManagementInterfaceClientImpl {

	private QName serviceName;
	private URL wsdlURL = BankManagementInterfaceExportBankManagementInterfaceHttpService.WSDL_LOCATION;
	private BankManagementInterfaceExportBankManagementInterfaceHttpService servis;
	private BankManagementInterface port;
	private SessionPomocna sessionPomocna;
	private Session session;
	private BankmsgDAO bankMsgDAO;
	private ReqmsgDAO reqMsgDAO;
	private Debug debug = new Debug("Bank");

	public BankManagementInterfaceClientImpl() {
	}

	public void razmjenaBanaka() {
		try {
			Log.loger.info("Poèetak razmjene banaka.");
			otvoriPortISesiju();
			createBank();
			changeBank();
			Log.loger.info("Završetak razmjene banaka.");
		} catch (Exception e) {
			Log.loger.severe("Greška kod razmjene banaka "
					+ PomocnaError.getErrorMessage(e));
		}
	}

	private void otvoriPortISesiju() {
		serviceName = new QName(
				BankManagementInterfaceExportBankManagementInterfaceHttpService.TARGET_NAMESPACE,
				BankManagementInterfaceExportBankManagementInterfaceHttpService.SERVIS);
		wsdlURL = BankManagementInterfaceExportBankManagementInterfaceHttpService.WSDL_LOCATION;
		servis = new BankManagementInterfaceExportBankManagementInterfaceHttpService(
				wsdlURL, serviceName);
		port = servis
				.getBankManagementInterfaceExportBankManagementInterfaceHttpPort();
		sessionPomocna = new SessionPomocna();
		session = sessionPomocna.getSession();
		bankMsgDAO = new BankmsgDAO(session);
		reqMsgDAO = new ReqmsgDAO(session);
	}

	//
	/*
	 * public void retrieveBankRequestMSG() { BankRetrieveRequestMsg request =
	 * new BankRetrieveRequestMsg(); MessageHeader messageHeader = new
	 * MessageHeader(); Bank bank = new Bank();
	 * request.setMessageHeader(messageHeader); // To do setiranje banke, vidi
	 * obavezna polja BankResponseMsg response = port.retrieveBank(request);
	 * 
	 * IspisObjekta ispis = new IspisObjekta(); ispis.ispis(response.getBank());
	 * }
	 */

	private void createBank() {
		Integer reqMsgId = reqMsgDAO.getIduciRbr();
		BankCreationRequestMsg request = new BankCreationRequestMsg();
		MessageHeader messageHeader;
		Bank bank;
		Reqmsg reqMsg = null;
		Resmsg resMsg = null;
		BankResponseMsg response = null;
		List banke = bankMsgDAO.getBankmsg((byte) 1);
		for (Iterator iterator = banke.iterator(); iterator.hasNext();) {
			Bankmsg bankMsg = (Bankmsg) iterator.next();
			try {
				sessionPomocna.otvoriTransakciju();
				// Request
				messageHeader = new MessageHeader();
				bank = new Bank();
				bank.postaviVrijednosti(bankMsg);
				request.setMessageHeader(messageHeader);
				request.setBank(bank);
				response = port.createBank(request);
				// Response
				resMsg = new Resmsg();
				reqMsg = new Reqmsg();
				resMsg.postaviVrijednosti(response.getMessageHeader(),
						"createBank", response.getResponseMessageType());
				reqMsg.postaviVrijednosti(response.getMessageHeader(),
						reqMsgId, "createBank");
				bankMsg.postaviVrijednosti(Pomocna.getStatus(response
						.getResponseMessageType()), reqMsg, PomocnaDatum
						.XMLDatumUDate(response.getMessageHeader()
								.getSubmitionTimestamp()));
				// Upis u bazu
				session.save(resMsg);
				Pomocna.obradaGresaka(session, response.getErrorResponse(),
						response.getMessageHeader());
				session.save(reqMsg);
				session.update(bankMsg);
				sessionPomocna.commitTransakcije();
				++reqMsgId;
			} catch (Exception e) {
				sessionPomocna.rollbackTransakcije();
				Log.loger.severe("Greška kod kreiranja nove banke, poruka: "
						+ Integer.toString(bankMsg.getIdBankmsg())
						+ PomocnaError.getErrorMessage(e));
			}

			finally {
				try {
					ResxmlDAO.spremiResponse(response.getMessageHeader()
							.getResponseMsgId(), response, session,
							sessionPomocna);
					if (Postavke.DEBUG_POJO) {
						debug.ispisUXML(
								resMsg,
								"Pojo_response_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
						debug.ispisUXML(
								reqMsg,
								"Pojo_request_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
						debug.ispisUXML(
								bankMsg,
								"Pojo_bank_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
					}
					if (Postavke.DEBUG_PORUKA) {
						debug.ispisUXML(
								request,
								"Message_request_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
						debug.ispisUXML(
								response,
								"Message_response_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
					}
				} catch (Exception e) {
					Log.loger
							.severe("Greška kod xml trace upisa banke, poruka: "
									+ Integer.toString(bankMsg.getIdBankmsg())
									+ " " + PomocnaError.getErrorMessage(e));
				}
			}

		}

	}

	private void changeBank() {
		Integer reqMsgId = reqMsgDAO.getIduciRbr();
		BankChangeRequestMsg request = new BankChangeRequestMsg();
		MessageHeader messageHeader;
		Bank bank;
		Reqmsg reqMsg = null;
		Resmsg resMsg = null;
		BankResponseMsg response = null;
		List banke = bankMsgDAO.getBankmsg((byte) 2);
		for (Iterator iterator = banke.iterator(); iterator.hasNext();) {
			Bankmsg bankMsg = (Bankmsg) iterator.next();
			try {
				sessionPomocna.otvoriTransakciju();
				// Request
				messageHeader = new MessageHeader();
				bank = new Bank();
				bank.postaviVrijednosti(bankMsg);
				request.setMessageHeader(messageHeader);
				request.setBank(bank);
				response = port.changeBank(request);
				// Response
				resMsg = new Resmsg();
				reqMsg = new Reqmsg();
				resMsg.postaviVrijednosti(response.getMessageHeader(),
						"changeBank", response.getResponseMessageType());
				reqMsg.postaviVrijednosti(response.getMessageHeader(),
						reqMsgId, "changeBank");
				bankMsg.postaviVrijednosti(Pomocna.getStatus(response
						.getResponseMessageType()), reqMsg, PomocnaDatum
						.XMLDatumUDate(response.getMessageHeader()
								.getSubmitionTimestamp()));
				// Upis u bazu
				session.save(resMsg);
				Pomocna.obradaGresaka(session, response.getErrorResponse(),
						response.getMessageHeader());
				session.save(reqMsg);
				session.update(bankMsg);
				sessionPomocna.commitTransakcije();
				++reqMsgId;
			} catch (Exception e) {
				sessionPomocna.rollbackTransakcije();
				Log.loger.severe("Greška kod izmjene banke, poruka: "
						+ Integer.toString(bankMsg.getIdBankmsg())
						+ PomocnaError.getErrorMessage(e));
			} finally {
				try {
					ResxmlDAO.spremiResponse(response.getMessageHeader()
							.getResponseMsgId(), response, session,
							sessionPomocna);
					if (Postavke.DEBUG_POJO) {
						debug.ispisUXML(
								resMsg,
								"Pojo_response_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
						debug.ispisUXML(
								reqMsg,
								"Pojo_request_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
						debug.ispisUXML(
								bankMsg,
								"Pojo_bank_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
					}
					if (Postavke.DEBUG_PORUKA) {
						debug.ispisUXML(
								request,
								"Message_request_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
						debug.ispisUXML(
								response,
								"Message_response_"
										+ Integer.toString(bankMsg
												.getIdBankmsg()));
					}
				} catch (Exception e) {
					Log.loger
							.severe("Greška kod xml trace izmjene banke, poruka: "
									+ Integer.toString(bankMsg.getIdBankmsg())
									+ " " + PomocnaError.getErrorMessage(e));
				}
			}

		}
	}

}